package jpabook.jpashop.domain.item;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.ManyToMany;

import jpabook.jpashop.domain.Category;
import jpabook.jpashop.exception.NotEnoughStockException;
import lombok.Getter;
import lombok.Setter;


@Inheritance(strategy = InheritanceType.SINGLE_TABLE)	//TODO 상속관계 전략 잡기
@DiscriminatorColumn(name = "dtype")					//TODO 싱글테이블 전략으로 각 아이템의 구분자 사용
@Entity
@Getter @Setter
public abstract class Item {

	@Id @GeneratedValue
	@Column(name = "item_id")
	private Long id;
	
	private String name;
	
	private int price;
	
	private int stockQuantity;
	
	@ManyToMany(mappedBy = "items")
	private List<Category> categories = new ArrayList<Category>();

	//비즈니스 로직
	//Setter를 안쓰고 내부처리를 이렇게 해줄수도 있다는걸 보여줌
	/*
	 * 수량 추가
	 */
	public void addStock(int quantity) {
		this.stockQuantity += quantity;
	}
	
	/*
	 * 수량 제거
	 */
	public void removeStock(int quantity) {
		int restStock = this.stockQuantity - quantity;
		if(restStock < 0) {
			throw new NotEnoughStockException("need more stock!!");
		}
		this.stockQuantity = restStock; 
		
	}
}
